<?php
/**
 * @file
 * Utility functions for the uhappy.md site.
 */

include_once 'helpers/smsc.php';

/* --- HOOKS ---------------------------------------------------------------- */

/**
 * Implements hook_init().
 */
function uhappy_utility_init() {
  if (arg(0) == 'node') {
    // Add custom js for price tables.
    // drupal_add_js(drupal_get_path('module', 'uhappy_utility') .'/assets/js/jquery-1.10.2.js', 'file');
    drupal_add_js(drupal_get_path('module', 'uhappy_utility') .'/assets/js/scrollReveal.js', 'file');
    drupal_add_js(drupal_get_path('module', 'uhappy_utility') .'/assets/scripts/pricing.js', 'file');
    // drupal_add_js(drupal_get_path('module', 'uhappy_utility') .'/assets/js/respond.min.js', 'file');
    // drupal_add_js(drupal_get_path('module', 'uhappy_utility') .'/assets/js/html5shiv.js', 'file');
    drupal_add_js('window.scrollReveal = new scrollReveal();', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
    // Add custom css for price tables.
    // drupal_add_css(drupal_get_path('module', 'uhappy_utility') . '/assets/css/bootstrap/bootstrap.min.css');
    // drupal_add_css(drupal_get_path('module', 'uhappy_utility') . '/assets/css/main.css');
    drupal_add_css(drupal_get_path('module', 'uhappy_utility') . '/assets/css/styles/blue.css');

  }
}

/**
* Implements hook_field_group_build_pre_render_alter().
* @param Array $elements by address.
*/
function uhappy_utility_field_group_build_pre_render_alter(&$element) {
  // $element['group_children_settings'] += array(
  //   '#states' => array(
  //     'visible' => array(
  //       '#edit-field-children-und' => array('checked' => TRUE),
  //     ),
  //   ),
  // );
}

/**
 * Implements of ctools_plugin_directory().
 */
function uhappy_utility_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function uhappy_utility_theme() {
  $theme['price_table'] = array(
    'template' => 'templates/price_table',
    'arguments' => array('content' => NULL),
  );

  return $theme;
}

/**
 * Implements hook_views_post_execute().
 */
function uhappy_utility_views_post_execute(&$view) {
  // Remove current node from related content.
  if ($view->name == 'content_list' && $view->current_display == 'block_2') {
    foreach ($view->result as $key => $results) {
      if ($results->nid == arg(1)) {
        unset($view->result[$key]);
      }
    }
  }
}

########### Ctools Modal ############

/**
 *  Implements of hook_menu()
 */
function uhappy_utility_menu() {
  $items = array();

  $items['order/%ctools_js/%'] = array(
      'title' => 'Order',
      'page arguments' => array(1, 2),
      'page callback' => 'order_modal_page',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * A modal static page callback.
 * @param $js
 *   boolean CTools determination whether the user's browser is javascript enabled.
 * @param $nid
 *   string The node ID of passed as an argument from the hook_menu() path
 * @return
 *   string The contents of the node, that will fill the modal window.
 */
function order_modal_page($js = NULL, $nid = NULL) {
  global $user;
  // If people aren't using javascript, then I just boot em. sorry.

  if (!$js) return "Upps.. Javascript required";

  // Include your ctools crap here
  // ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');
  module_load_include('inc', 'node', 'node.pages');

  // Create a blank node object here. You can also set values for your custom fields here as well.
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'order',
    'language' => LANGUAGE_NONE,
  );

  $form_state = array(
    'title' => t('Order character on holiday'),
    'ajax' => TRUE,
  );

  $form_state['build_info']['args'] = array($node);
  // change this to your type node form
  $output = ctools_modal_form_wrapper('order_node_form', $form_state);

  $output[0]['output'] .= '<div class="content-phone-description">' . variable_get('site_phone_description', '') . '</div>';
  $output[0]['output'] .= '<div class="content-phone">' . variable_get('site_phone', '') . '</div>';

  // This means the form has been exectued
  if (!empty($form_state['executed'])) {
    $output = array();
    // Close the modal
    $output[] = ctools_modal_command_dismiss();

    // $confirm_message = array("#markup" => '<div> '
    //   . t('FUCK.')
    //   . '</div>');
    // $confirmation['#markup'] = '<div class="popups-confirmation-wrapper">' . drupal_render($confirm_message) . '</div>';
    // // Recreate output
    // $output = array();
    // // Overwrite the form output if it was successful.
    // $output[] = ctools_modal_command_display(t('Tak for din henvendelse'), $confirmation);

  }

  print ajax_render($output);
  exit;
}

/**
 * Implements hook_views_pre_render()
 */
function uhappy_utility_node_view($node) {
  // // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // // Add CTools' javascript to the page.
  ctools_modal_add_js();
}

########### End Ctools Modal ############

/**
 *  Implements of hook_form_FORM_ID_alter()
 */
function uhappy_utility_form_order_node_form_alter(&$form, &$form_state) {
  $nid = arg(2);
  // Hide the title field.
  hide($form['title']);

  if (arg(0) == 'order' && $nid) {
    // Load the parent node from the argument.
    $scenario_node = node_load($nid);
    // Set default title and disable field.
    $form['title']['#default_value'] = $scenario_node->title;
    $form['title']['#disabled']      = TRUE;

    $form['field_character_name']['und']['#default_value'] = $scenario_node->field_character_name['und'][0]['tid'];

    // Unset some values from the form.
    unset($form['field_number_of_children']['und']['#options']['_none']);
    hide($form['actions']['preview']);

    // Chnage value for submit button.
    $form['actions']['submit']['#value'] = t('Order');
  }
}

/**
 *  Implements of hook_form_alter()
 */
function uhappy_utility_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'system_site_information_settings':
      // Define site phone number
      $form['site_information']['site_phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone number'),
        '#description' => t('Define site phone number.'),
        '#default_value' => variable_get('site_phone', ''),
      );
      // Define phone number description
      $form['site_information']['site_phone_description'] = array(
        '#type' => 'textfield',
        '#title' => t('Description for phone number'),
        '#description' => t('Description for site phone number.'),
        '#default_value' => variable_get('site_phone_description', ''),
      );
  }
}

/**
 *  Implements of hook_node_presave()
 */
function uhappy_utility_node_presave($node) {
  if ($node->type == 'order') {
    $node->title = $node->title . ':' . $node->field_name['und'][0]['value'] . ':' . date('Y-m-d H:i:s', $node->created);
    // Define message to send.
    $message = "New order {" . $node->title . "} was created";
    // Send the sms message.
    send_sms("37379142089", $message);
  }
}

################## Custom Block View ############################

/**
* Implements hook_block_info().
*/
function uhappy_utility_block_info() {
  $blocks = array();
  $blocks['slider_block'] = array(
    'info' => t('Slider block'),
  );

  return $blocks;
}

/**
* Implements hook_block_configure().
*/
function uhappy_utility_block_configure($delta='') {
  $form = array();

  switch($delta) {
    case 'slider_block' :
      // Text field form element
      $form['block_custom_html'] = array(
        '#type' => 'text_format',
        '#title' => t('Enter your custom html'),
        '#default_value' => variable_get('block_custom_html', ''),
      );
      break;
  }
  return $form;
}

/**
* Implements hook_block_save().
*/
function uhappy_utility_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'slider_block' :
      // Saving the WYSIWYG text
      variable_set('block_custom_html', $edit['block_custom_html']['value']);
      // Saving the file, setting it to a permanent state, setting a FID variable
      $block = block_load('slider_block', $delta);
      break;
  }
}

/**
* Implements hook_block_view().
*/
function uhappy_utility_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'slider_block' :
      $block['content'] = _uhappy_block_view();
    break;
  }

  return $block;
}

/**
* Custom function to assemble renderable array for block content.
* Returns a renderable array with the block content.
* @return
* returns a renderable array of block content.
*/
function _uhappy_block_view() {
  $block = array();
  // Capture WYSIWYG text from the variable
  $text = variable_get('block_custom_html', '');
  if (!empty($text)) {
    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');
    // Add CTools' javascript to the page.
    ctools_modal_add_js();
    // Set title.
    $name = t('Order');
    // Get nid.
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', 'order')
      ->execute()
      ->fetchAssoc();
    // Create a path for the url that is like our hook_menu() declaration above.
    $href = 'order/nojs/' . $result['nid'];
    $text .= '<div class="order">' . ctools_modal_text_button($name, $href, t('View node content for @name', array('@name' => $name)), 'ctools-modal-uhappy-modal-style') . '</div>';
  }

  // Block output in HTML with div wrapper
  $block = array(
    'message' => array(
      '#type' => 'markup',
      '#markup' => $text,
      '#suffix' => '',
    ),
  );
  return $block;
}
